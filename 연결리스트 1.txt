#include <stdio.h>
#define MAX_LIST_SIZE 100 
typedef int element; 
typedef struct {
	element array[MAX_LIST_SIZE]; 
	int size; 
} ArrayListType;


void error(char* message)
{
	fprintf(stderr, "%s\n", message);
	exit(1);
}

void init(ArrayListType* p)
{
	p->size = 0;
}

int is_empty(ArrayListType* p)
{
	return p->size == 0;
}

int is_full(ArrayListType* p)
{
	return p->size == MAX_LIST_SIZE;
}
element get_entry(ArrayListType* p, int pos)
{
	if (pos < 0 || pos >= p->size)
		error("위치 오류");
	return p->array[pos];
}
void print_list(ArrayListType* p)
{
	int i;
	for (i = 0; i < p->size; i++)
		printf("%d->", p->array[i]);
	printf("\n");
}

void insert_last(ArrayListType* p, element item)
{
	if (p->size >= MAX_LIST_SIZE) {
		error("리스트 오버플로우");
	}
	p->array[p->size++] = item;
}
void insert(ArrayListType* p, int pos, element item)
{
	if (!is_full(p) && (pos >= 0) && (pos <= p->size)) {
		for (int i = (p->size - 1); i >= pos; i--)
			p->array[i + 1] = p->array[i];
		p->array[pos] = item;
		p->size++;
	}
}
element delete(ArrayListType* p, int pos)
{
	element item;
	if (pos < 0 || pos >= p->size)
		error("위치 오류");
	item = p->array[pos];
	for (int i = pos; i < (p->size - 1); i++)
		p->array[i] = p->array[i + 1];
	p->size--;
	return item;
}


int main(void)
{

	ArrayListType list;
	init(&list);
	insert(&list, 0, 10); print_list(&list); 
	insert(&list, 0, 20); print_list(&list); 
	insert(&list, 0, 30); print_list(&list);
	insert_last(&list, 40); print_list(&list);
	delete(&list, 0); print_list(&list); 
	return 0;
}